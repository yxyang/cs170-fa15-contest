import java.io.File;
import java.io.FileNotFoundException;
import java.util.Scanner;
import java.util.Random;

public class dataPicker {
	
	public static int calc_sum(int[] perm, int[][] g, int n) {
		int sum = 0;
		for (int x = 0; x < n; x++) {
			for (int y = x+1; y < n; y++) {
				sum += g[perm[x]][perm[y]];
			}
		}
		return sum;
	}

	
	public static void main(String[] args) throws FileNotFoundException {
		//Scanner input = new Scanner(System.in);
		int num_data = 621;
		int num_iter = 2000000;
		String[] file_to_check = new String[]{"./intermediate_results/rand.out",
				"./intermediate_results/HassinRubinstein.out"};
		Scanner[] scanners = new Scanner[file_to_check.length];
		for (int i = 0; i < file_to_check.length; i++) {
			scanners[i] = new Scanner(new File(file_to_check[i]));
		}
		
		for (int i = 1; i <= num_data; i++) {
			File file = new File("./instances/" + i + ".in");
			Scanner input = new Scanner(file);
			int num_ver = input.nextInt();
			int[][] a = new int[num_ver][num_ver];
			for (int x = 0; x < num_ver; x++) {
				for (int y = 0; y < num_ver; y++) {
					a[x][y] = input.nextInt();
				}
			}
			input.close();
			
			int[] bestPerm = new int[num_ver];
			int bestSum = calc_sum(bestPerm, a, num_ver);
			String bestMethod = "Brute-Force";
			for (int j = 0; j < num_ver; j++) bestPerm[j] = i;
			
			for (int j = 0; j < file_to_check.length; j++) {
				int[] currPerm = new int[num_ver];
				for (int k = 0; k < num_ver; k++) {
					currPerm[k] = scanners[j].nextInt() - 1;
				}
				if (calc_sum(currPerm, a, num_ver) > bestSum) {
					bestSum = calc_sum(currPerm, a, num_ver);
					bestPerm = currPerm;
					bestMethod = file_to_check[j];
				}
			}
			
			//System.out.println("For data " + i + ", the best method is:");
			//System.out.println(bestMethod);
			//System.out.println(bestSum);
			
			for (int i = 0; i < num_ver; i++) {
				System.out.print(bestPerm[i] + " ");
			}
			System.out.println();
		}
		
		for (int i = 0; i < file_to_check.length; i++) {
			scanners[i].close();
		}
	}
}
