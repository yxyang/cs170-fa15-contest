import java.util.Scanner;
import java.util.Random;

public class HassinRubinstein {
	public static int[] partition(int[] arr, int n, int[][] g) {
		int[] ans = new int[n];		
		int l = 0, r = n-1, d = -1;
		
		while (l < r) {
			d += 1;
			int x = arr[d];
			
			int inDegree = 0, outDegree = 0;
			for (int i = 0; i < n; i++) {
				inDegree += g[i][x];
				outDegree += g[x][i];
			}
			if (inDegree <= outDegree) {
				ans[l] = x;
				l += 1;				
			} else {
				ans[r] = x;
				r -= 1;
			}
		}
		System.out.println();
		return ans;
	}
	
	public static int calc_sum(int[] perm, int[][] g, int n) {
		int sum = 0;
		for (int x = 0; x < n; x++) {
			for (int y = x+1; y < n; y++) {
				sum += g[perm[x]][perm[y]];
			}
		}
		return sum;
	}
	
	public static int[] shuffle(int[] a, int n, int[][] g) {
		int[] left = new int[n], right = new int[n];
		int l = 0, r = 0;
		Random rnd = new Random();
		for (int i = 0; i < n; i++) {
			if (rnd.nextBoolean()) {
				left[l] = i; l++;
			} else {
				right[r] = i; r++;
			}
		}
		
		int[] ll = partition(left, l, g);
		int[] rr = partition(right, r, g);
		int[] ans1 = new int[n], ans2 = new int[n];
		for (int i = 0; i < n; i++) {
			if (i < l) {
				ans1[i] = ll[i];
			} else {
				ans1[i] = rr[i - l];
			}
			
			if (i < r) {
				ans2[i] = rr[i];
			} else {
				ans2[i] = ll[i - r];
			}
		}
		for (int i = 0; i < l; i++) {
			System.out.print(ll[i] + " ");
		}
		System.out.println();
		
		for (int i = 0; i < r; i++) {
			System.out.print(rr[i] + " ");
		}
		System.out.println();
		
		for (int i = 0; i < n; i++) {
			System.out.print(ans1[i] + " ");
		}
		System.out.println(x);;
		if (calc_sum(ans1, g, n) > calc_sum(ans2, g, n)) {
			return ans1;
		} else {
			return ans2;
		}
	}
	
	public static int[] run(int n, int[][] a, int num_iter) {
		int[] ord = new int[n];
		for (int i = 0; i < n; i++) {
			ord[i] = i;
		}
		
		int[] best_ord = null;
		int max = 0;
		for (int i = 0; i < num_iter; i++) {
			ord = shuffle(ord, n, a);
			int sum = calc_sum(ord, a, n);
			if (sum > max) {
				max = sum;
				best_ord = ord;
			}
		}
		System.out.println("Max value is: " + max);
		return best_ord;
	}
	
	public static void main(String[] args) {
		Scanner input = new Scanner(System.in);
		int num_data = input.nextInt();
		int num_iter = 1;
		
		for (int i = 0; i < num_data; i++) {
			int num_ver = input.nextInt();
			int[][] a = new int[num_ver][num_ver];
			for (int x = 0; x < num_ver; x++) {
				for (int y = 0; y < num_ver; y++) {
					a[x][y] = input.nextInt();
				}
			}
			int[] ans = run(num_ver, a, num_iter);
			for (int k = 0; k < num_ver; k++) {
				System.out.print((1 + ans[k]) + " ");
			}
			System.out.println();
		}
		input.close();
	}
}
